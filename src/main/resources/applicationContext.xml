<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.xiaozhi">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--Spring的配置文件,这里主要配置和业务逻辑有关的-->
    <!--数据源，事务控制等-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--=========================================配置和Mybatis的整合======================================================-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="pooledDataSource"></property>
        <!--指定mybatis，mapper文件的位置-->
        <property name="mapperLocations" value="classpath:com/xiaozhi/mapper/*.xml"></property>
    </bean>

    <!--配置扫描器，将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的实现，加入到ioc容器中-->
        <property name="basePackage" value="com.xiaozhi.mapper"></property>
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
    </bean>

    <!--配置一个可以执行批量的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!--==============================================事务控制的配置======================================================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>
    <!--开启基于注解的事务,使用xml配置形式的事务（主要使用xml配置）-->
    <aop:config>
        <!--切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* com.xiaozhi.service..*(..))"></aop:pointcut>
        <!--配置事务增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>
    <!--配置事务增强,事务如何切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager" >  <!--transaction-manager的默认值为transactionManager，
                                                                        若上面manager的名字不是transactionManager，则需设置-->
        <tx:attributes>
            <!--所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--以get开始的所有方法-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--&lt;!&ndash;开启事务注解扫描&ndash;&gt;-->
    <!--Spring配置文件的核心点（数据源，与mybatis的整合，事务控制）-->
    <!--=================================================Shiro相关配置============================================================-->
    <!--&lt;!&ndash; Sample RDBMS data source that would exist in any application - not Shiro related. &ndash;&gt;-->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <!--<property name="driverClassName" value="org.hsqldb.jdbcDriver"/>-->
    <!--<property name="url" value="jdbc:hsqldb:mem:shiro-spring"/>-->
    <!--<property name="username" value="sa"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; Populates the sample database with sample users and roles. &ndash;&gt;-->
    <!--<bean id="bootstrapDataPopulator" class="org.apache.shiro.samples.spring.BootstrapDataPopulator">-->
    <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; Simulated business-tier "Manager", not Shiro related, just an example &ndash;&gt;-->
    <!--<bean id="sampleManager" class="org.apache.shiro.samples.spring.DefaultSampleManager"/>-->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!--安全管理器bean
    1.缓存技术:缓存管理
    2.realm：负责获取处理数据的
    -->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!--<property name="sessionMode" value="native"/>-->

        <!--认证-->
        <property name="authenticator" ref="authenticator"></property>
        <!--授权-->
        <property name="authorizer" ref="authorizer"></property>
    </bean>
    <!--多个realm第二种方式，自定义一个认证器-->
    <bean id ="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="realms">
            <list>
                <ref bean="UserRealm"></ref>
            </list>
        </property>
        <property name="authenticationStrategy" ref="allSuccessfulStrategy"></property>
    </bean>

    <!--自定义一个授权器-->
    <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <property name="realms">
            <list>
                <ref bean="UserRealm"></ref>
            </list>
        </property>
    </bean>

    <!--认证策略-->
    <bean id="allSuccessfulStrategy" class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
    <bean id="UserRealm" class="com.xiaozhi.realm.UserRealm">
        <!--配置加密property-->
        <property name="credentialsMatcher"><!--正常是使用ref，以便在整个web环境下都可用，但这里只用在Realm中，故配置bean-->
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="md5"/>
                <property name="hashIterations" value="1024"/>
                <property name="storedCredentialsHexEncoded" value="true"/>
            </bean>
        </property>
    </bean>
    <bean id="jdbcRealm" class="com.xiaozhi.realm.ShiroRealm">
        <!--配置加密property-->
        <property name="credentialsMatcher"><!--正常是使用ref，以便在整个web环境下都可用，但这里只用在Realm中，故配置bean-->
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="md5"/>
                <property name="hashIterations" value="1024"/>
                <property name="storedCredentialsHexEncoded" value="true"/>
            </bean>
        </property>
    </bean>
    <bean id="secondRealm" class="com.xiaozhi.realm.ShiroRealm2">
        <!--配置加密property-->
        <property name="credentialsMatcher"><!--正常是使用ref，以便在整个web环境下都可用，但这里只用在Realm中，故配置bean-->
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"/>
                <property name="hashIterations" value="1024"/>
                <property name="storedCredentialsHexEncoded" value="true"/>
            </bean>
        </property>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!--我们可以使用的缓存技术
    EHCACH缓存框架
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--<bean id="jdbcRealm" class="org.apache.shiro.samples.spring.realm.SaltAwareJdbcRealm">-->
    <!--<property name="name" value="jdbcRealm"/>-->
    <!--<property name="dataSource" ref="dataSource"/>-->
    <!--<property name="credentialsMatcher">-->
    <!--&lt;!&ndash; The 'bootstrapDataPopulator' Sha256 hashes the password-->
    <!--(using the username as the salt) then base64 encodes it: &ndash;&gt;-->
    <!--<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
    <!--<property name="hashAlgorithmName" value="SHA-256"/>-->
    <!--&lt;!&ndash; true means hex encoded, false means base64 encoded &ndash;&gt;-->
    <!--<property name="storedCredentialsHexEncoded" value="false"/>-->
    <!--</bean>-->
    <!--</property>-->
    <!--</bean>-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/static/403.html</prop>
            </props>
        </property>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
          with a Subject for security checks. -->
    <!--网络方面-->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"></tx:annotation-driven>-->
    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--
    配置ShiroFilter
    1.shiroFilter这个bean的id必须要和web.xml文件中的filter-name保持一致
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/views/login.jsp"/>
        <property name="successUrl" value="/views/list.jsp"/>
        <property name="unauthorizedUrl" value="/views/login.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <!--代表我们要完成shiro过滤器的具体配置-->
        <property name="filterChainDefinitions">
            <value>
                /login**=anon
                /static**=anon
                <!--/**=authc-->
                <!--/logout =logout-->
                <!--/bootstrap-3.3.7-dist/**=anon-->
                <!--/js/**=anon-->
                <!--/static/**=anon-->
                <!--/admin.jsp =roles[admin]-->
                <!--/user.jsp =roles[user]-->
                <!--/** = authc-->
            </value>
        </property>
    </bean>



</beans>